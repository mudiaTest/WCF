<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <appSettings>
    <add key="aspnet:UseTaskFriendlySynchronizationContext" value="true" />
    <add key="ClientSettingsProvider.ServiceUri" value="" />
  </appSettings>
  
  <system.web>
    <compilation debug="true" />
  </system.web>
  
  <system.serviceModel>

    <!-- https://msdn.microsoft.com/en-us/library/ms731399(v=vs.110).aspx - ogólnie-->
    <!-- https://msdn.microsoft.com/en-us/library/ms730879(v=vs.110).aspx - lista bindingów dostarczonych przez system -->
    <bindings>
      <!-- * [open/close/recieve/send]Timeout - (def: 1 min) - czas przeznaczony na operację danego typu do jej zakończenia - niewiem czym są i kiedy się odbywają poszczególne operacje.
		       * textEncoding- kodowanie - (def UTF-8) 
		       * name - nazwa bindingu - nazwa, która wraz z namespace, jednoznacznie identyfikuje binding. Może być pusta (tzw Simplified Configuration )
		       * namespace - def: "http://tempuri.org/Bindings"
		       * maxReceivedMessageSize - maksymalny rozmiar w bajtach dla  tego kanału (def ~65kB). Wysyłający otrzymuje SOAP fault dla zbyt dużej informacji. Odbiorca przuca pobraną wiadomośći i tworzy wpis w entry log
		       * messageEncoding - sposób kodowania wiadomości (def: Text)	 
		       * allowCookies - wskazuje, czy odbiorca pobiera cookies i potem ich używa
       -->
      <basicHttpBinding>
        <!-- https://www.codeproject.com/Articles/36732/WCF-FAQ-Part-security-related-FAQ -->
        <binding>
          <!--  mode = [none/Transport/Message/kombinacje] - Message - kodowanie samej wiadomości
				        message - używać jeśli będzie nkt pośredniczący pomiędzy klientem a serwerem. W takiej sytuacji SSL nic nie da bo punkt pośredniczący będzie mógł odczytać informację. 
				        transport - (np SSL/TLS uzywany w HTTPS, SSH) uzywać w bezpośredniej komunikacji klienta z serweram - zalecany		 
          -->
          <security > 
            <!--  -->
            <transport/>
            <!--  -->
            <message/>
          </security>
          <readerQuotas/>
        </binding>
      </basicHttpBinding>  
      <!-- jak BasicHttpBinding, ale zawiera dodatkowe atrybuty, pozwalające uzywać cookies i pozwalać na wymianę kontekstów poprzez SOAP headers. 
		    Używane głównie do budowy w Durable services. Chodzi o to, że pomiędzy kolejnymi request WCF nie zachowuje stanu serwera. DS ma temu zapobiegać. 
		    Jest to podobny efekt do zastosowania InstanceContextMode.PerSession, ale to zadzaiała tylko do czasu restarty client lub service, natoamiast 
		    DS może ominąć te ograniczenie.  
		    Ogólnie wygląda to tak, że definicja klasy service posiada metodę tworzacą instancję i metodę usuwającą instancję. 
		    Cała reszta robiona jest automatycznie, tzn odtwarzanie i uaktualnianie instancji service.
		    https://www.codeproject.com/Articles/830070/WCF-Durable-Service 
		    https://msdn.microsoft.com/en-us/library/bb628514(v=vs.90).aspx 
		    ?? Przetestować
           Działa
		    ?? Sprawdzić, czy allowCookiesjest true zamiast false
           TAK
      -->
      <basicHttpContextBinding>        
        <!-- Bending uzywany domyślnie przez przekazywania metadanych przez HTTP/HTTPS/NamedPipe/TCP. Jest to WSHttpBinding  z wyłączonym security.
		      ?? Sprawdzić, czy jest to binding dla endpointa kind "mex"	
          <mex[Http=""/Https/NamedPipe/Tcp]Binding>
        -->
      </basicHttpContextBinding>
    </bindings>
  </system.serviceModel>
</configuration>


<!-- Brief summary of binding timeout knobs...

Client side:

SendTimeout is used to initialize the OperationTimeout, which governs the whole interaction for sending a message (including receiving a reply message in a request-reply case). This timeout also applies when sending reply messages from a CallbackContract method.
OpenTimeout and CloseTimeout are used when opening and closing channels (when no explicit timeout value is passed).
ReceiveTimeout is not used.
Server side:

Send, Open, and Close Timeout same as on client (for Callbacks).
ReceiveTimeout is used by ServiceFramework layer to initialize the session-idle timeout. -->


<!--
Callback jest używane w komunikacji duplec. client definiuje metodę, którą ustawia swojej instancji (np podczas Create). 
Podczas gdy klient robi request do serwera , to serweer dostaje też callback method i moję to wywołać. Gdy serwer to 
 zrobi, to klient dostaje kanałem zwrotnym rozkaz wykonaina tej metody (wraz z potwencjalnymi argumentami).
http://stackoverflow.com/questions/1044174/what-steps-do-i-need-to-take-to-use-wcf-callbacks
-->

<!--
Badanie requesta. 
1) Odpalić OperationContext.Current.RequestContext.RequestMessage wewnątrz implementacji service
-->
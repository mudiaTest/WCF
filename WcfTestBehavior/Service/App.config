<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />
    </startup>
    <system.serviceModel>

      <behaviors>
        <serviceBehaviors>
          
          <behavior name="">
            
            <!--* httpGetEnabled/httpsGetEnabled udostępnia metadane service przez wsdl. 
                  Alternatywą jest utworzenie endpoint "mex" i implementacja interfejsu IMetadataExchange w service
                  Wymaga ustalonego httpGetUrl lub <service><host><baseAddresses>
                * httpGetUrl - adres dla pobierania metadanych. Jeśli nie ustawimy, to będzie to adres <service><host><baseAddresses>/?wsdl
                * httpGetBinding / httpsGetBinding - Określa typ bingingu do wysyłania metadanych przez wsdl jeśli httpGetEnabled='true'. 
                  Binding musi implementować IReplyChannel
                * httpGetBindingConfiguration / httpsGetBindingConfiguration - konfiguracja bindingu udostępniającego meta dane
                -->
            <serviceMetadata 
              httpGetEnabled="true"
              httpsGetEnabled="true"
              />
            
            <!--* httpHelpPage... / httpsHelpPage... - zestaw ustawień do wyświetlania customowej strony help pod adresem baseAddress z service, jeśli ten jest ustawiony. 
                  Aby utworzyć stronę autonatyczną należy użyć mechanizmu REST https://code.msdn.microsoft.com/windowsdesktop/WCF-Custom-Help-Page-6f5a90f0#content
                * includeExceptionDetailInFaults - czy zwracać szczegółową  informację o będzie do klienta, czyli można
                  zrobić try/catch(Exception e) i w messagr dostać mormalny komunkat - może zmniejszać bezpieczeństwo
            -->
            <serviceDebug includeExceptionDetailInFaults="true" httpHelpPageEnabled="true"/>
            
            <serviceAuthenticationManager/>
            <serviceAuthorization/>
            
            <!-- WCF może zapisywać security related events do logu.  
                 https://msdn.microsoft.com/en-us/library/ms731669(v=vs.110).aspx
                 http://stackoverflow.com/questions/20798088/how-to-enable-security-logging-in-wcf-service-using-auditloglocation-security
                * auditLogLocation - określa gdzie odłoża się logi application log albo security log (domyślna wartość zależy od systemu)
                * suppressAuditFailure - określa kto obsłuży wyjątki powstałe podczas zapisu do logu - true-system obsługuje większość wyjątków; false - wszystko idzie do aplikacji
                * serviceAuthorizationAuditLevel - określa jakie typy zadarzenia związane z service będą logowane autoryzacja/jej brak /kombinacje
                * messageAuthenticationAuditLevel - określa jakie typy zdarzenia związane z message będą logowane autoryzacja/jej brak /kombinacje
            -->            
            <serviceSecurityAudit/>   
            
            <!-- WCF może ustawić transakcję pomiędzy client i server, tak, ze w client można wywołać pod transakcją kilka calls i jeśli choć jedno 
                 padnie, to te wcześniej wykonane zrobią rollback.Z przykładów wygląda na to, ze jest to mocno powiązane z transakcjali DB. Pytanie 
                 jak to bedzie działac jeśli kazda metoda service bedzie działąc pod inną sesją. 
               * transactionTimeout - timeout transakcji. 
                 ! NIE mylić z timeout operacji (open/close/recieve/sendTimeout) !
                  http://stackoverflow.com/questions/1533985/testing-wcf-transaction-time-outs
            -->
            <serviceTimeouts/>          
            
            <!-- Używany do powiadamiania klienta o poprawnym -->
            <serviceDiscovery/>
            
            <!--* maxConcurrentCalls - określa max liczbę jednocześnie opracowywanych calls (domyślnie to 16*liczba procesów, 0 to max). 
                  Reszta idzie do kolejki
                * maxConcurrentSessions - określa max liczbę sesji. Sesje poza limitem będą aktywne (domyślnie to 100*liczba procesów, 0 to max), 
                  ale nie będą obsługiwane.
                * maxConcurrentInstances - określa max liczbę instancji service (domyślnie maxConcurrentSessions + MaxConcurrentCalls, 0 to max). 
                  Service poza limitem czekaą na zwolnienie slotu.
            -->
            <serviceThrottling maxConcurrentCalls="4" />
          
          </behavior>
          <!--Dodanie behavior dla service: host.Description.Behaviors.Add(/* Service Behavior */);-->
          <!--Odczyt bahavior dla service: ServiceMetadataBehavior metad = host.Description.Behaviors.Find<ServiceMetadataBehavior>()-->
          
          <behavior name="test">
            <serviceMetadata httpGetEnabled="false" httpsGetEnabled="false" />
              <!--serviceMetadata httpGetEnabled="true" httpGetUrl="http://localhost:8080/SampleService?wsdl"/-->
            <serviceDebug includeExceptionDetailInFaults="false" />
          </behavior>
          
        </serviceBehaviors>
      </behaviors>
      
        <services>
          <service name="BehaviorTest.Service10000" behaviorConfiguration="">
            <host>
              <baseAddresses>
                <add baseAddress="http://localhost:9999/" />
              </baseAddresses>
            </host>
            <endpoint address="http://localhost:9999/Service10000"
                binding="basicHttpBinding" bindingConfiguration="" name="ServiceEndpoint10000"
                contract="BehaviorTest.IService10000" />
            <!--endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange"/-->
          </service>
        </services>

    </system.serviceModel>
</configuration>